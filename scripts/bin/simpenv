#! /bin/sh

#  This script is used to create an environment for SIMP 6.4 or later.
#  See ./simpenv --help for more information.
#
trap "exit 1" TERM
export TOP_PID=$$

function error_msg () {
#  printf "$1"
  echo "$1"
  kill -s TERM $TOP_PID
}

function create_write_env () {
  local newenvdir="${1}/${2}"

  if [[ -d $newenvdir ]]; then
    error_msg "Writeable Environment Directory ${newenvdiri} already exists"
  fi

  mkdir $newenvdir
  chown root:$puppet_group $newenvdir
  chmod 770 $newenvdir

}

function create_secondary_env () {
  local olddir=$(pwd)
  local envdir=$1
  local skeldir=$2
  local rsyncskeldir=$3

  if [[ -d $envdir ]]; then
    error_msg "Can not create new environment ${env2}, it already exists"
  fi
  mkdir $envdir
  chmod 755 $envdir

  # create Fake ca and key dirs
  rsync -a "${skeldir}/" $envdir
  dd if=/dev/urandom count=24 bs=1 status=none | openssl enc -a -out "${envdir}/FakeCA/cacertkey"
  #copy rsync files
  rsync -a $rsyncskeldir $envdir

  # make sure selinux contexts are good
  fixfiles restore $envdir
  # make sure permissions and acls are correct
  cd ${envdir}/rsync
  if [[ -f  .rsync.facl ]]; then
    setfacl --restore=.rsync.facl
  else
    echo "Could not find rsync ACL file.  Permissions on rsync directory may not be correct"
  fi
  cd $olddir
}

function copy_or_link_env () {
  local basedir=$1
  local newenv=$2
  local oldenv=$3
  local operation=$4
  if [[ ! -d "${basedir}/${oldenv}" ]]; then
    error_msg "Old environment ${basedir}/${oldenv} does not exist."
  fi
  if [[ -d "${basedir}/$newenv" ]]; then
    error_msg "New environment ${basedir}/${newenv} exists already"
  fi
  case $operation in
    link )
      ln -s "${basedir}/${oldenv}" "${basedir}/${newenv}"
      ;;
    copy )
      rsync -a "${basedir}/${oldenv}" "${basedir}/${newenv}"
      ;;
    * )
      error_msg "Invalid operation ${operation}, must be 'link' or 'copy'"
      ;;
  esac
}

function list_env_dirs () {
  echo "-----------------------------------------------------------------------"
  echo "--- Puppet Environment: ${PUPENVDIR} --------------"
  ls -la $PUPENVDIR
  echo "-----------------------------------------------------------------------"
  echo " "
  echo "-----------------------------------------------------------------------"
  echo "--- Secondary Environment: ${ENV2DIR} --------------"
  ls -la $ENV2DIR
  echo "-----------------------------------------------------------------------"
  echo " "
  echo "-----------------------------------------------------------------------"
  echo "--- Writeable Environment: ${ENV3DIR} --------------"
  echo 
  ls -la $ENV3DIR
  echo "-----------------------------------------------------------------------"
}

function create_puppet_env () {
  local curdir=$(pwd)
  local newenv=$1
  local puppetdir=$2
  local pupskeldir=$3

  newenvdir="${puppetdir}/${newenv}"

  if [[ -d "${newenvdir}" ]]; then
    error_msg "${newenvdir} already exists"
  fi

  if [[ ! -d $pupskeldir ]]; then
    error_msg "Puppet Environment Skeleton Dir, ${pupskeldir}, does not exist"
  fi

  mkdir $newenvdir
  rsync -a "${pupskeldir}/" $newenvdir
  cat > ${newenvdir}/environment.conf <<ENVCONF
#Do not remove \$basemodulepath from this.

modulepath = modules:/var/simp/environments/${newenv}/site_files:\$basemodulepath
environment_timeout = 0
ENVCONF
  if [[ ! -f Puppetfile ]]; then
    simp puppetfile generate --skeleton > "${newenvdir}/Puppetfile"
  fi
  if [[ ! -f Puppetfile.simp ]]; then
    simp puppetfile generate > "${newenvdir}/Puppetfile.simp"
  fi
  chown -R root:$puppet_group $newenvdir
  chmod -R g+rX $newenvdir
  cd $curdir
}

function usage () {

cat <<EOU
Usage:  This script will create the SIMP environment for a new environment.
  See:  https://simp-project.atlassian.net/wiki/spaces/SD/pages/760840207/Environments
  for information the various parts of an enviroment.

  There are three parts of the  SIMP environment,
  Puppet, Secondary, and Writeable environments, and they can individually
  be either:
    - created new from skeletons provided by the simp modules,
    - linked to an existing environment
    - copied from an existing environment

  simpenv -n|-c|-l|-d [new|copy|link] [EXISTING_ENV] NEWENV
    -n create all parts from the skeleton
         simpenv -n NEWENV
    -l link both parts of the SIMP Extra Environment to an existing environemtn
       and create the Puppet Environment from the environment that was linked.
        simpenv -l EXISTING_ENV NEWENV
    -c copy both parts from an existing environment
        simpenv -c EXISTING_ENV NEWENV
    -a create each part using a different method
       simpenv -a PUPPET SECONDARY WRITEABLE EXISTING_ENV NEWENV

         For example if you want to create the Puppet and Secondary environemnt but link
         the Writable environment:
         simpenv -d new new link  myexistingenv mynewenv

    NOTE:  To complete the installation of the environment you must run r10k to install
    the install the puppet modules in the new environment.
EOU
# This is here so the script will exit after the usage statement is printed
error_msg "Usage Printed"
}

### Main Program ###
SKELBASE=/usr/share/simp/environments
SKELDIR="${SKELBASE}/simp"
SECSKELDIR="${SKELBASE}/secondary"
RSYNCSKELDIR="${SKELBASE}/rsync"
PUPENVDIR=$(puppet config print environmentpath 2> /dev/null)
ENV2DIR="/var/simp/environments"
WRITEBASE=$(puppet config print --section=master vardir 2> /dev/null)
ENV3DIR="${WRITEBASE}/simp/environments"

#initialize variables
oldenv=''
newenv=''

# Set puppet group and user.
puppet_user=$(puppet config print user 2> /dev/null)
puppet_group=$(puppet config print group 2> /dev/null)
#Check that all our base dirs and skeletons exist
for dir in $SKELDIR $PUPENVDIR $RSYNCSKELDIR $SECSKELDIR $WRITEBASE $ENV2DIR
do
  if [[  ! -d $dir  || -z $dir  ]]; then
    error_msg "Verification of skeleton directories failed.  Directory, ${dir}, does not exist.  Cannot continue"
  fi
done

# Check that simp directories exist and if not create them
if [[ ! -d $ENV3DIR ]]; then
  mkdir -p $ENV3DIR
  chmod 750 "${WRITEBASE}/simp"
  chmod 750 "${WRITEBASE}/simp/environments"
  chown  $puppet_user:$puppet_group "${WRITEBASE}/simp"
  chown  $puppet_user:$puppet_group "${WRITEBASE}/simp/environments"
fi

## get arguments
case $1 in
  -n )
    if [[ $# -lt 2 ]]; then
      usage;
    fi
    shift
    newenv=$1
    secop='new'
    writeop='new'
    pupenvop='new'
    ;;
  -l | -c )
    if [[ $# -lt 3 ]]; then
      usage;
    fi
    # Always copy the puppet environment
    pupenvop='copy'
    if [[ "$1" == '-c' ]]; then
      secop='copy'
      writeop='copy'
    else
      secop='link'
      writeop='link'
    fi
    shift
    oldenv=$1
    shift
    newenv=$1
    shift
    ;;
  -a )
    if [[ $# -lt 5 ]]; then
      usage
    fi
    shift
    case $1 in
      new | copy )
        pupenvop=$1
        ;;
      * )
        usage
        ;;
    esac
    shift
    case $1 in
      new | link | copy )
        secop=$1
        ;;
      * )
        usage
        ;;
    esac
    shift
    case $1 in
      new | link | copy )
        writeop=$1
        ;;
      * )
        usage
        ;;
    esac
    shift
    oldenv=$1
    shift
    newenv=$1
    ;;
  --list)
    list_env_dirs
    exit $?
    ;;
  -h | --help)
    usage
    ;;
  * )
    usage
    ;;
esac

# Make sure a new environment was passed
if [[ -z $newenv ]]; then
  error_msg "No new existing environment name was provided"
fi

basedir=$PUPENVDIR
case $pupenvop in
  new)
    create_puppet_env $newenv $basedir $SKELDIR
    ;;
  copy)
    if [[ -z $oldenv ]]; then
      error_msg "No existing environment was provided to copy from"
    fi
    create_puppet_env $newenv $basedir "${basedir}/${olddir}"
    ;;
  *)
    error_msg "Invalid operation, ${pupenvop}, for ${basedir} environment"
    ;;
esac

#Perform Ops on Environment 2
basedir=$ENV2DIR
case $secop in
  new )
    newenvdir="${basedir}/${newenv}"
    create_secondary_env $newenvdir $SECSKELDIR $RSYNCSKELDIR
    ;;
  link|copy )
    if [[ -z $olddir ]]; then
      error_msg "No  existing environment was provided to copy from"
    fi
    copy_or_link_env $basedir $newenv $oldenv $secop
    ;;
  * )
    error_msg "Invalid operation, ${secop}, for ${basedir} environment"
    ;;
esac

# Perform Ops on Writeable environment
basedir=$ENV3DIR
case $writeop in
  new )
    create_write_env $basedir $newenv
    ;;
  link|copy )
    if [[ -z $oldenv ]]; then
      error_msg "No existing environment was provided to copy from"
    fi
    copy_or_link_env $basedir $newenv $oldenv $writeop
    ;;
  * )
    error_msg "Invalid operation, $writeop, for $basedir environment"
    ;;
esac

echo "Creation completed successfully."
